{"version":3,"sources":["/home/mrhorse/Desktop/github/PlaticasTalleres/2018/real-time-chat/pages/test.js"],"names":["Text","props","state","userCount","username","onlineUsers","messages","msgInput","typing","connected","userTyping","handeChange","handleChange","bind","handleSubmit","handleMessageChange","sendMessage","updateTyping","socket","io","on","data","setState","msgDb","joined","concat","userName","console","log","e","target","value","preventDefault","emit","typingMaxTime","lastTypingTime","Date","getTime","setTimeout","typingTimer","timeDiff","map","key","msg"],"mappings":"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","file":"5.30650d54ca99ed279462.hot-update.js","sourcesContent":["import { Component } from 'react'\nimport io from 'socket.io-client'\n\nexport default class Text extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      userCount: 'No users',\n      username: '',\n      onlineUsers:['Cimadev'],\n      messages: [],\n      msgInput: '',\n      typing: false,\n      connected: false,\n      userTyping: ''\n    }\n    this.handeChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleMessageChange = this.handleMessageChange.bind(this)\n    this.sendMessage = this.sendMessage.bind(this)\n    this.updateTyping = this.updateTyping.bind(this)\n  }\n\n  componentDidMount() {\n    this.socket = io()\n    this.socket.on('login', (data) => {\n      this.setState({\n        userCount: data.userCount,\n        onlineUsers: data.onlineUsers,\n        messages: data.msgDb,\n        connected: true\n      })\n    })\n    this.socket.on('user joined', (data) => {\n      let joined = this.state.onlineUsers.concat(data.userName)\n      this.setState({\n        userCount: data.userCount,\n        onlineUsers: joined\n      })\n      console.log('User joined: ', data.userName)\n    })\n    this.socket.on('user left', (data) => {\n      this.setState({\n        userCount: data.userCount,\n        onlineUsers: data.onlineUsers\n      })\n    })\n    this.socket.on('send message', (data) => {\n      this.setState({\n        messages: data.msgDb,\n      })\n    })\n    this.socket.on('new message', (data) => {\n      this.setState({\n        messages: data.msgDb,\n      })\n    })\n    this.socket.on('typing', (data) => {\n      this.setState({\n        userTyping: data.userName\n      })\n    })\n    this.socket.on('stop typing', (data) => {\n      this.setState({\n        userTyping: ''\n      })\n    })\n  }\n\n  handleChange(e) {\n    this.setState({\n      username: e.target.value\n    })\n  }\n\n  handleSubmit(e) {\n    console.log(`User ${this.state.username} logged in`)\n    e.preventDefault()\n    this.socket.emit('add user', this.state.username)\n  }\n\n  handleMessageChange(e) {\n    e.preventDefault()\n    this.updateTyping()\n    this.setState({\n      msgInput: e.target.value\n    })\n  }\n\n  sendMessage() {\n    this.socket.emit('new message', this.state.msgInput)\n    this.setState({\n      msgInput: ''\n    })\n  }\n\n  updateTyping() {\n    console.log('setting typer')\n    let typingMaxTime = 400 //ms\n    if(this.state.connected) {\n      if(!this.state.typing) {\n        this.setState({\n          typing: true\n        })\n        this.socket.emit('typing')\n      }\n      let lastTypingTime = (new Date()).getTime()\n      setTimeout(() => {\n        let typingTimer = (new Date().getTime())\n        let timeDiff = typingTimer- lastTypingTime\n        if (timeDiff >= typingMaxTime && this.state.typing) {\n          this.socket.emit('stop typing');\n          this.setState({\n            typing: false\n          })\n        }\n      }, typingMaxTime)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        CimaChat - {this.state.userCount} online\n        <input value={this.state.username} onChange={e => this.handleChange(e)}/>\n        <button onClick={this.handleSubmit}>Login</button>\n        <br />\n        Write message: <br /> <input value={this.state.msgInput} onChange={e => this.handleMessageChange(e)}/>\n        <button onClick={this.sendMessage}>send</button>\n        <h1>Userlist</h1>\n        {\n          this.state.onlineUsers.map((username, key) => {\n            return (\n              <li key={key}>{username}</li>\n            )\n          })\n        }\n        <h1>Messages</h1> <h2>User typing: {this.state.userTyping}</h2>\n        {\n          this.state.messages.map((msg, key) => {\n            return (\n              <li key={key}>{msg.userName} - {msg.msg}</li>\n            )\n          })\n        }\n      </div>\n    )\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./pages/test.js"],"sourceRoot":""}